<?php 
/* Cachekey: cache/stash_default/documentation\api\php\2f5201894fdb04485f38b959d7bf01a6/ */
/* Type: array */
/* Expiration: 2018-02-15T02:46:48+00:00 */



$loaded = true;
$expiration = 1518662808;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1518265014;
