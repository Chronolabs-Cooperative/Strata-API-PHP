<?php 
/* Cachekey: cache/stash_default/documentation\api\php\26f094e1524f719d51c32fc18f19b861/ */
/* Type: array */
/* Expiration: 2018-02-15T10:19:00+00:00 */



$loaded = true;
$expiration = 1518689940;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1518265014;
