<?php 
/* Cachekey: cache/stash_default/documentation\api\php\aa1431fb6b2bb0bcc373e8b890665e20/ */
/* Type: array */
/* Expiration: 2018-02-15T01:36:58+00:00 */



$loaded = true;
$expiration = 1518658618;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1518265014;
